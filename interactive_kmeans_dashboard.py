# -*- coding: utf-8 -*-
"""interactive_KMeans_dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DwthHwXPv1nsc2NHZQaoXbpO_asQSdq4
"""


# Install dependencies as needed:
# pip install kagglehub[pandas-datasets]
import kagglehub
from kagglehub import KaggleDatasetAdapter

# Set the path to the file you'd like to load
file_path = "SCFP2019.csv"

# Load the latest version
data = kagglehub.load_dataset(
  KaggleDatasetAdapter.PANDAS,
  "syntheticprogrammer/survey-of-consumer-finances-2022",
  file_path,
  # Provide any additional arguments like
  # sql_query or pandas_kwargs. See the
  # documenation for more information:
  # https://github.com/Kaggle/kagglehub/blob/main/README.md#kaggledatasetadapterpandas
)

print("First 5 records:", data.head())

import pandas as pd
import os
import plotly.express as px
from dash import Input, Output, dcc, html
from IPython.display import VimeoVideo
from dash import Dash
from scipy.stats.mstats import trimmed_var
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler

def wrangle(df):
    """Read SCF data file into ``DataFrame``.

    Returns only credit fearful households whose net worth is less than $2 million.

    Parameters
    ----------
    filepath : str
        Location of CSV file.
    """
    #df = pd.read_csv(filepath)
    mask = (df["TURNFEAR"] == 1) & (df["NETWORTH"] < 2e6)
    df = df[mask]
    return df

df = wrangle(data)
df.head()

app = Dash(__name__)

print("app type:", type(app))


def get_high_var_features(trimmed=True, return_feat_names=True):
    """Returns the five highest-variance features of ``df``.

    Parameters
    ----------
    trimmed : bool, default=True
        If ``True``, calculates trimmed variance, removing bottom and top 10%
        of observations.

    return_feat_names : bool, default=False
        If ``True``, returns feature names as a ``list``. If ``False``
        returns ``Series``, where index is feature names and values are
        variances.
    """
    if trimmed:
       top_five_features = (df.apply(trimmed_var).sort_values().tail(5))
    else:
        top_five_features = df.var().sort_values().tail(5)
    if return_feat_names:
        return top_five_features.index.tolist()
    return top_five_features

@app.callback(
    Output("bar-chart", "figure"), Input("trim-button", "value")
)
def serve_bar_chart(trimmed=True):
    """Returns a horizontal bar chart of five highest-variance features.

    Parameters
    ----------
    trimmed : bool, default=True
        If ``True``, calculates trimmed variance, removing bottom and top 10%
        of observations.
    """
    top_five_features = get_high_var_features(trimmed=trimmed, return_feat_names=False)
    fig = px.bar(x=top_five_features, y=top_five_features.index, orientation="h")
    fig.update_layout(xaxis_title="Varience", yaxis_title="Features")
    return fig

def get_model_metrics(trimmed=True, k=2, return_metrics=False):
    """Build ``KMeans`` model based on five highest-variance features in ``df``.

    Parameters
    ----------
    trimmed : bool, default=True
        If ``True``, calculates trimmed variance, removing bottom and top 10%
        of observations.

    k : int, default=2
        Number of clusters.

    return_metrics : bool, default=False
        If ``False`` returns ``KMeans`` model. If ``True`` returns ``dict``
        with inertia and silhouette score.

    """
    features = get_high_var_features(trimmed=trimmed, return_feat_names=True)
    X = df[features]
    model = make_pipeline(StandardScaler(), KMeans(n_clusters=k, random_state=42))
    model.fit(X)

    if return_metrics:
        i = model.named_steps['kmeans'].inertia_
        ss = silhouette_score(X, model.named_steps['kmeans'].labels_)
        metrics = {
            "inertia": round(i),
            "silhouette": round(ss, 3)
        }
        return metrics
    return model

@app.callback(
    Output("metrics", "children"),
    Input("trim-button", "value"),
    Input("k-slider", "value")
)
def serve_metrics(trimmed=True, k=2):
    """Returns list of ``H3`` elements containing inertia and silhouette score
    for ``KMeans`` model.

    Parameters
    ----------
    trimmed : bool, default=True
        If ``True``, calculates trimmed variance, removing bottom and top 10%
        of observations.

    k : int, default=2
        Number of clusters.
    """
    metrics = get_model_metrics(trimmed=trimmed, k=k, return_metrics=True)
    inertia_header = html.H3(f"Inertia: {metrics['inertia']}")
    silhouette_header = html.H3(f"Silhouette Score: {metrics['silhouette']}")
    return [inertia_header, silhouette_header]

def get_pca_labels(trimmed=True, k=2):
    """
    Returns a DataFrame with "PC1", "PC2", and ``KMeans`` labels.

    Parameters
    ----------
    trimmed : bool, default=True
        If ``True``, calculates trimmed variance, removing bottom and top 10%
        of observations.

    k : int, default=2
        Number of clusters.
    """
    features = get_high_var_features(trimmed=trimmed, return_feat_names=True)
    X = df[features]
    model = get_model_metrics(trimmed=trimmed, k=k)
    pca = PCA(n_components=2)
    X_pca = pca.fit_transform(X)
    labels = model.named_steps['kmeans'].labels_
    X_pca = pd.DataFrame(X_pca, columns=["PC1", "PC2"])
    X_pca["labels"] = labels
    return X_pca

@app.callback(
    Output("pca-scatter", "figure"),
    Input("trim-button", "value"),
    Input("k-slider", "value")
)
def serve_scatter_plot(trimmed=True, k=2):
    """Build 2D scatter plot of ``df`` with ``KMeans`` labels.

    Parameters
    ----------
    trimmed : bool, default=True
        If ``True``, calculates trimmed variance, removing bottom and top 10%
        of observations.

    k : int, default=2
        Number of clusters.
    """
    pca_df = get_pca_labels(trimmed=trimmed, k=k)
    fig = px.scatter(
        pca_df,
        x="PC1",
        y="PC2",
        color="labels",
        title=f"PCA Scatter Plot (k={k})",
        labels={"labels": "Cluster"}
    )
    return fig

app.layout = html.Div(
    [
        # Application title
        html.H1("Survey of Consumer Finances"),

        # Section subtitle
        html.H2("High Variance Features"),
        dcc.Graph(figure=serve_bar_chart(), id="bar-chart"),
        dcc.RadioItems(
            options=[{"label":"trimmed", "value": True},
                    {"label":"not trimmed", "value": False}],
            value=True,
            id="trim-button"
        ),
        html.H2("K-means Clusterin"),
        html.H3("Number of Clusters (k)"),
        dcc.Slider(min=2, max=12, step=1, value=2, id="k-slider"),
        html.Div(id="metrics"),
        dcc.Graph(id="pca-scatter")
    ]
)

if __name__ == "__main__":
    app.run(debug=True)

